package de.velcommuta.denul.networking.protobuf.study;
// Message types for communicating study requests and responses

// Wrapper message to contain a serialized Study message and a signature
// over the serialized bytes. Used to transmit StudyCreate, StudyJoinQuery
// and StudyDelete messages
message StudyWrapper {
	enum MessageType {
		MSG_UNKNOWN = 0;
		MSG_STUDYCREATE = 1;
		MSG_STUDYJOINQUERY = 2;
		MSG_STUDYDELETE = 3;
	}
	required MessageType type = 1;
	// The serialized Study message
	required bytes message = 2;
	// The byte-representation of the signature
	required bytes signature = 3;
}

// Message type to contain metadata about a study
message StudyCreate {
	enum DataType {
		DATA_UNKNOWN = 0;
		DATA_GPS_TRACK = 1;
		DATA_STEP_COUNT = 2;
	}

	enum DataGranularity {
		GRAN_FINE = 0;
		GRAN_COARSE = 1;
		GRAN_VERY_COARSE = 2;
	}

	enum KexAlgo {
		KEX_UNKNOWN = 0;
		KEX_ECDH_CURVE25519 = 1;
	}

	enum PubkeyAlgo {
		PK_UNKNOWN = 0;
		PK_RSA = 1;
	}

	enum VerificationStrategy {
		VF_UNKNOWN = 0;
		VF_DNS_TXT = 1;
		VF_FILE = 2;
		VF_META = 3;
	}

	// Submessage to encapsulate the information about the investigator
	// conducting the study
	message Investigator {
		// Investigator name
		required string name = 1;
		// Institution (University, ...)
		required string institution = 2;
		// Group within University
		required string group = 3;
		// Position in group
		required string position = 4;
	}

	message DataRequest {
		required DataType datatype = 1;
		required DataGranularity granularity = 2;
		// Frequency of reporting, in hours
		required int32 frequency = 3;
	}
	// Study information
	required string study_name = 1;
	required string institution = 2;
	required string webpage = 3;
	required string description = 4;
	required string purpose = 5;
	required string procedures = 6;
	required string risks = 7;
	required string benefits = 8;
	required string payment = 9;
	required string conflicts = 10;
	required string confidentiality = 11;
	required string participationAndWithdrawal = 12;
	required string rights = 13;
	repeated Investigator investigators = 14;
	repeated DataRequest dataRequest = 15;
	required bytes publicKey = 16;
	required PubkeyAlgo publicKeyAlgo = 17;
	required VerificationStrategy verificationStrategy = 18;
	optional string verificationData = 19;
	required bytes kexData = 20;
	required KexAlgo kexAlgorithm = 21;
	required bytes queueIdentifier = 22;
}

message StudyCreateReply {
	enum CreateStatus {
		CREATE_UNKNOWN = 0;
		CREATE_OK = 1;
		CREATE_FAIL_SIGNATURE = 2;
		CREATE_FAIL_IDENTIFIER = 3;
		CREATE_FAIL_VERIFICATION = 4;
	}

	required bytes queueIdentifier = 1;
	required CreateStatus status = 2;
}

message StudyIdentifierRequest {
	// Empty? Nothing much we need here
}

message StudyIdentifierReply {
	required bytes queueIdentifier = 1;
}

// Message to query the server for available studies
message StudyListQuery {
	// Don't really need anything in this message
}

// Message containing a list of StudyWrappers containing StudyCreate messages
// (We need the wrappers as they contain the signatures)
message StudyListReply {
	repeated StudyWrapper studylist = 1;
}

// Message to announce joining of a study. Will be serialized,
// encrypted with the public key, and used in a regular PUT message
message StudyJoin {
	enum KexAlgo {
		KEX_UNKNOWN = 0;
		KEX_ECDH_CURVE25519 = 1;
	}

	required bytes queueIdentifier = 1; // Not for use by the server, but for the research client (this stuff is encrypted)
	required bytes kexData = 2;
	required KexAlgo kexAlgorithm = 3;
}

// Query message to ask the server for new StudyJoin messages saved
// under the queueIdentifier. MUST be wrapped in a StudyWrapper and
// signed using the study's private key
// TODO Nonce? Replay protection of some sort? Is this even needed?
message StudyJoinQuery {
	required bytes queueIdentifier = 1;
}

// Reply by the server to indicate the result of the StudyJoinQuery
message StudyJoinQueryReply {
	enum QueryStatus {
		STATUS_UNKNOWN = 0;
		STATUS_OK = 1;
		STATUS_FAIL_NOT_FOUND = 2;
		STATUS_FAIL_SIGNATURE = 3;
	}

	required QueryStatus status = 1;
	repeated bytes message = 2;
}

// Request to delete a study from the server. MUST be wrapped in a
// StudyWrapper and signed, or the server will reject it
message StudyDelete {
	required bytes queueIdentifier = 1;
}

message StudyDeleteReply {
	enum DeleteStatus {
		DELETE_UNKNOWN = 0;
		DELETE_OK = 1;
		DELETE_FAIL_BAD_IDENT = 2;
		DELETE_FAIL_BAD_SIG = 3;
	}

	required DeleteStatus status = 1;
}